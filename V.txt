OI
olá


Avaliação Prática
▪ Esta avaliação contém 5 questões, valendo 10 (dez) pontos no total.
ATENÇÃO: 
•	Entrega no portal:
o	Para todas as questões deverá ser incluso o Objeto PL/SQL.
o	Para todas as questões deverá print de execução da Objeto PL/SQL
o	Também deverá ser anexado na entrega o arquivo com os scripts em PL/SQL.
o	Para execução das questões é obrigatoriamente utilizar as tabelas já criadas em sala de aula.


Você foi contratado por uma empresa do setor de comércio digital com atuação nacional. O banco de dados da empresa contém informações sobre pedidos, produtos, clientes, estoque, localização e vendedores. Seu desafio é implementar rotinas PL/SQL para gerar relatórios estratégicos.
Implemente, conforme solicitado abaixo, 2 funções e 3 procedures. 
_________________________________________________________________________________________________________
1. Função – fnc_valor_total_por_estado
Implemente uma função chamada fnc_valor_total_pedidos_por_estado que receba a sigla de um estado como parâmetro (p_uf IN VARCHAR2). Essa função deve consultar todos os pedidos vinculados a clientes residentes nesse estado e retornar o valor total de todos os pedidos que tenham entrega confirmada (DAT_ENTREGA IS NOT NULL).

Essa função é utilizada para medir o desempenho de vendas por estado, sendo essencial para análise regional. A consulta deverá realizar JOINs entre as tabelas historico_pedido, endereco_cliente, cidade e estado. Deverá aplicar SUM para calcular o valor total e utilizar filtros para entregar apenas pedidos entregues.

Parâmetro: p_uf VARCHAR2
Retorno: NUMBER (soma dos valores de pedidos entregues)
2. Função – fnc_qtd_itens_em_pedidos_por_produto
Crie uma função chamada fnc_qtd_itens_em_pedidos_por_produto que receba o código de um produto (p_cod_produto IN NUMBER) e retorne a quantidade total de unidades vendidas desse produto. A função deve utilizar JOINs entre item_pedido, pedido e produto, e aplicar agregação com SUM na coluna QTD.

Parâmetro: p_cod_produto NUMBER
Retorno: NUMBER (quantidade total vendida)
3. Procedure – prc_relatorio_pedidos_por_cliente
Desenvolva a procedure prc_relatorio_pedidos_por_cliente, que percorre todos os clientes utilizando um FOR LOOP. Para cada cliente, deve exibir via DBMS_OUTPUT: nome do cliente, cidade, quantidade de pedidos realizados, valor total comprado e se houve algum pedido cancelado (com IF/ELSE). Clientes sem pedidos também devem ser incluídos usando LEFT JOIN. Trate exceções como clientes sem endereço ou sem cidade associada.

Parâmetro: Nenhum
Saída: Exibição formatada via DBMS_OUTPUT.PUT_LINE
4. Procedure – prc_movimentacao_produto_por_vendedor
Crie a procedure prc_movimentacao_produto_por_vendedor, que percorre cada vendedor e lista os produtos vendidos, quantidade total e valor total de vendas por produto. Utilize um LOOP para percorrer os produtos por vendedor e IF para mostrar "Sem vendas registradas" quando aplicável. Inclua vendedores sem movimentações usando RIGHT JOIN. Trate exceções relacionadas a dados faltantes.

Esse exercício foca em indicadores de performance individuais e exige o uso de controle de fluxo e agregações condicionais.

Parâmetro: Nenhum
Saída: Exibição via DBMS_OUTPUT
5. Procedure – prc_analise_vendas_por_vendedor
Implemente a procedure prc_analise_vendas_por_vendedor, que recebe como parâmetro o código de um vendedor (p_cod_vendedor NUMBER) e apresenta um relatório cruzando informações de clientes, produtos e vendas realizadas por esse vendedor. A procedure deve utilizar JOINs entre as tabelas vendedor, pedido, item_pedido, produto e cliente para obter, para cada cliente atendido pelo vendedor informado: o nome do cliente, o nome do produto adquirido e a quantidade total comprada. Os dados devem ser agrupados por cliente e produto, e exibidos por meio de DBMS_OUTPUT.PUT_LINE. A procedure deve percorrer os clientes utilizando um LOOP, aplicar a estrutura IF/ELSE para classificar o perfil de compra de cada cliente com base na quantidade total adquirida: exiba “CLIENTE FIEL” para clientes que compraram mais de 50 unidades, “CLIENTE RECORRENTE” para aqueles que compraram entre 11 e 50 unidades, “CLIENTE OCASIONAL” para até 10 unidades e “NENHUMA COMPRA REGISTRADA” caso o cliente não tenha efetuado nenhuma compra. Utilize LEFT JOIN para garantir que clientes sem pedidos também sejam considerados na análise. Implemente tratamento de exceções utilizando EXCEPTION para lidar com casos de dados nulos, clientes ou produtos com nome ausente e eventuais erros de execução. Essa procedure permite gerar uma análise personalizada de comportamento de compra por vendedor, sendo útil para estratégias de fidelização e gestão de performance comercial.
Parâmetro: p_cod_vendedor NUMBER
Saída: Exibição via DBMS_OUTPUT


CREATE OR REPLACE PROCEDURE prc_movimentacao_produto_por_vendedor
IS
BEGIN
    FOR v IN (SELECT * FROM vendedor) LOOP
        DBMS_OUTPUT.PUT_LINE('Vendedor: ' || v.nome);

        DECLARE
            CURSOR c_prod IS
                SELECT p.nome AS produto, SUM(ip.qtd) AS qtd, SUM(ip.qtd * ip.preco_unitario) AS total
                FROM pedido pd
                JOIN item_pedido ip ON pd.id_pedido = ip.id_pedido
                JOIN produto p ON ip.id_produto = p.id_produto
                WHERE pd.id_vendedor = v.id_vendedor
                GROUP BY p.nome;

            v_contador NUMBER := 0;
        BEGIN
            FOR prod IN c_prod LOOP
                DBMS_OUTPUT.PUT_LINE('- Produto: ' || prod.produto || 
                                     ' | Quantidade: ' || prod.qtd || 
                                     ' | Total vendido: ' || prod.total);
                v_contador := v_contador + 1;
            END LOOP;

            IF v_contador = 0 THEN
                DBMS_OUTPUT.PUT_LINE('Sem vendas registradas.');
            END IF;

            DBMS_OUTPUT.PUT_LINE('----------------------------');
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
END;
/







SET SERVEROUTPUT ON;



















create or replace FUNCTION fnc_media_itens_por_pedido
RETURN NUMBER IS
    v_total_itens NUMBER;
    v_total_pedidos NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_total_itens FROM item_pedido;
    SELECT COUNT(DISTINCT COD_PEDIDO) INTO v_total_pedidos FROM item_pedido;

    IF v_total_pedidos = 0 THEN
        RETURN 0;
    ELSE
        RETURN v_total_itens / v_total_pedidos;
    END IF;

EXCEPTION
    WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.PUT_LINE('Não há pedidos cadastrados.');
        RETURN 0;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
        RETURN 0;
END;

-------------------------------------------------------------------------------------------------------------------------------------------------


create or replace FUNCTION fnc_qtd_itens_em_pedidos_por_produto(p_cod_produto IN NUMBER)
RETURN NUMBER IS
    v_qtd NUMBER := 0;
BEGIN
    SELECT SUM(ip.qtd_item)
    INTO v_qtd
    FROM item_pedido ip
    JOIN pedido p ON p.cod_pedido = ip.cod_pedido
    WHERE ip.cod_produto = p_cod_produto;

    RETURN v_qtd;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
    WHEN OTHERS THEN
        RETURN -1;
END;


-------------------------------------------------------------------------------------------------------------------------

create or replace PROCEDURE prc_relatorio_pedidos_por_cliente IS
BEGIN
    FOR rec IN (
        SELECT c.nom_cliente, ci.nom_cidade,
               COUNT(hp.cod_pedido) AS qtd_pedidos,
               SUM(hp.val_total_pedido) AS total,
               MAX(CASE WHEN hp.dat_cancelamento IS NOT NULL THEN 'SIM' ELSE 'NÃO' END) AS cancelado
        FROM cliente c
        LEFT JOIN endereco_cliente ec ON ec.cod_cliente = c.cod_cliente
        LEFT JOIN cidade ci ON ci.cod_cidade = ec.cod_cidade
        LEFT JOIN historico_pedido hp ON hp.cod_cliente = c.cod_cliente
        GROUP BY c.nom_cliente, ci.nom_cidade
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || rec.nom_cliente);
        DBMS_OUTPUT.PUT_LINE('Cidade: ' || rec.nom_cidade);
        DBMS_OUTPUT.PUT_LINE('Total de Pedidos: ' || rec.qtd_pedidos);
        DBMS_OUTPUT.PUT_LINE('Valor Total: R$' || rec.total);
        DBMS_OUTPUT.PUT_LINE('Cancelou Pedido: ' || rec.cancelado);
        DBMS_OUTPUT.PUT_LINE('---------------------------');
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao gerar relatório: ' || SQLERRM);
END;

EXEC  prc_relatorio_pedidos_por_cliente;


------------------------------------------------------------------------------------------------------------------------------


create or replace PROCEDURE prc_analise_vendas_por_vendedor(p_cod_vendedor IN NUMBER) IS
BEGIN
    FOR reg IN (
        SELECT c.nom_cliente, pr.nom_produto, SUM(ip.qtd_item) AS qtd_total
        FROM vendedor v
        JOIN pedido pe ON pe.cod_vendedor = v.cod_vendedor
        JOIN cliente c ON c.cod_cliente = pe.cod_cliente
        LEFT JOIN item_pedido ip ON ip.cod_pedido = pe.cod_pedido
        LEFT JOIN produto pr ON pr.cod_produto = ip.cod_produto
        WHERE v.cod_vendedor = p_cod_vendedor
        GROUP BY c.nom_cliente, pr.nom_produto
    ) LOOP
        BEGIN
            IF reg.qtd_total IS NULL THEN
                DBMS_OUTPUT.PUT_LINE('Cliente: ' || reg.nom_cliente || ' | Produto: ' || reg.nom_produto || ' | Nenhuma compra registrada');
            ELSIF reg.qtd_total > 50 THEN
                DBMS_OUTPUT.PUT_LINE('Cliente: ' || reg.nom_cliente || ' | Produto: ' || reg.nom_produto || ' | Quantidade: ' || reg.qtd_total || ' | Classificação: CLIENTE FIEL');
            ELSIF reg.qtd_total BETWEEN 11 AND 50 THEN
                DBMS_OUTPUT.PUT_LINE('Cliente: ' || reg.nom_cliente || ' | Produto: ' || reg.nom_produto || ' | Quantidade: ' || reg.qtd_total || ' | Classificação: CLIENTE RECORRENTE');
            ELSE
                DBMS_OUTPUT.PUT_LINE('Cliente: ' || reg.nom_cliente || ' | Produto: ' || reg.nom_produto || ' | Quantidade: ' || reg.qtd_total || ' | Classificação: CLIENTE OCASIONAL');
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Erro ao processar cliente/produto: ' || SQLERRM);
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro na execução da procedure: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE prc_relatorio_pedidos_por_cliente
IS
BEGIN
    FOR rec IN (
        SELECT c.id_cliente, c.nome, ci.nome AS cidade,
               COUNT(p.id_pedido) AS qtd_pedidos,
               SUM(p.valor_total) AS total_comprado,
               MAX(CASE WHEN p.status = 'Cancelado' THEN 1 ELSE 0 END) AS houve_cancelamento
        FROM cliente c
        LEFT JOIN pedido p ON c.id_cliente = p.id_cliente
        LEFT JOIN endereco_cliente ec ON c.id_cliente = ec.id_cliente
        LEFT JOIN cidade ci ON ec.id_cidade = ci.id_cidade
        GROUP BY c.id_cliente, c.nome, ci.nome
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || rec.nome);
        DBMS_OUTPUT.PUT_LINE('Cidade: ' || NVL(rec.cidade, 'N/D'));
        DBMS_OUTPUT.PUT_LINE('Quantidade de Pedidos: ' || NVL(rec.qtd_pedidos, 0));
        DBMS_OUTPUT.PUT_LINE('Valor Total Comprado: ' || NVL(rec.total_comprado, 0));
        
        IF rec.houve_cancelamento = 1 THEN
            DBMS_OUTPUT.PUT_LINE('Houve cancelamento de pedido');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Nenhum pedido cancelado');
        END IF;

        DBMS_OUTPUT.PUT_LINE('------------------------------');
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao gerar relatório: ' || SQLERRM);
END;
/